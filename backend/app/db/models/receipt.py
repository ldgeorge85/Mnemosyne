"""
Receipt Model

This module defines the Receipt model for transparency and audit trail.
Every significant interaction with the system generates a receipt.
"""

from datetime import datetime
from typing import Optional, Dict, Any
from uuid import uuid4
from sqlalchemy import Column, String, Text, DateTime, JSON, ForeignKey, Enum, Float, Boolean
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID
from app.db.session import Base
import enum


class ReceiptType(str, enum.Enum):
    """Types of receipts generated by the system."""
    # Memory operations
    MEMORY_CREATE = "memory_create"
    MEMORY_CREATED = "memory_created"  # Alias for consistency
    MEMORY_UPDATE = "memory_update"
    MEMORY_UPDATED = "memory_updated"  # Alias for consistency
    MEMORY_DELETE = "memory_delete"
    MEMORY_DELETED = "memory_deleted"  # Alias for consistency
    MEMORY_SEARCH = "memory_search"
    
    # Task operations
    TASK_CREATE = "task_create"
    TASK_CREATED = "task_created"  # Alias for consistency
    TASK_UPDATE = "task_update"
    TASK_UPDATED = "task_updated"  # Alias for consistency
    TASK_COMPLETE = "task_complete"
    TASK_COMPLETED = "task_completed"  # Alias for consistency
    TASK_DELETE = "task_delete"
    TASK_DELETED = "task_deleted"  # Alias for consistency
    TASK_STARTED = "task_started"
    
    # Chat operations
    CHAT_MESSAGE = "chat_message"
    
    # Persona operations
    PERSONA_MODE_CHANGE = "persona_mode_change"
    WORLDVIEW_UPDATE = "worldview_update"
    
    # Authentication operations
    AUTH_LOGIN = "auth_login"
    AUTH_LOGOUT = "auth_logout"
    
    # Trust operations
    TRUST_EXCHANGE = "trust_exchange"
    TRUST_EVENT = "trust_event"

    # Negotiation operations
    NEGOTIATION_CREATED = "negotiation_created"
    NEGOTIATION_JOINED = "negotiation_joined"
    NEGOTIATION_OFFER = "negotiation_offer"
    NEGOTIATION_ACCEPTED = "negotiation_accepted"
    NEGOTIATION_CONSENSUS = "negotiation_consensus"
    NEGOTIATION_FINALIZED = "negotiation_finalized"
    NEGOTIATION_BINDING = "negotiation_binding"
    NEGOTIATION_WITHDRAWN = "negotiation_withdrawn"
    NEGOTIATION_DISPUTED = "negotiation_disputed"

    # Consent operations
    CONSENT_GIVEN = "consent_given"
    CONSENT_REVOKED = "consent_revoked"

    # Agent operations
    AGENT_ACTION = "agent_action"


class Receipt(Base):
    """
    Receipt model for transparency and audit trail.
    
    Every significant action in the system generates a receipt that documents:
    - What happened
    - When it happened
    - Who initiated it
    - What data was involved
    - What decisions were made
    - What the outcome was
    
    Receipts are immutable once created and form the transparency layer
    of the Mnemosyne Protocol.
    """
    
    __tablename__ = "receipts"
    
    # Primary key
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    
    # Core fields
    user_id = Column(UUID(as_uuid=True), ForeignKey('users.id'), nullable=False)
    receipt_type = Column(Enum(ReceiptType), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow, nullable=False)
    
    # Action details
    action = Column(String(255), nullable=False)  # Human-readable action description
    entity_type = Column(String(50))  # Type of entity affected (memory, task, etc.)
    entity_id = Column(UUID(as_uuid=True))  # ID of affected entity
    
    # Context and metadata
    context = Column(JSON)  # Additional context about the action
    request_data = Column(JSON)  # Sanitized request data (no sensitive info)
    response_data = Column(JSON)  # Sanitized response data
    
    # Persona and worldview state
    persona_mode = Column(String(50))  # Active persona mode during action
    worldview_profile = Column(JSON)  # Active worldview configuration
    
    # Decision tracking
    decisions_made = Column(JSON)  # List of decisions and their rationale
    confidence_score = Column(Float)  # Confidence in the action (0-1)
    alternatives_considered = Column(JSON)  # Other options that were evaluated
    
    # Privacy and consent
    consent_basis = Column(String(255))  # Legal/ethical basis for the action
    data_categories = Column(JSON)  # Categories of data involved
    privacy_impact = Column(String(50))  # Low/Medium/High privacy impact
    
    # Transparency features
    user_visible = Column(Boolean, default=True)  # Whether user can see this receipt
    explanation = Column(Text)  # Human-readable explanation of what happened
    
    # Technical metadata
    service_name = Column(String(100))  # Which service generated the receipt
    service_version = Column(String(50))  # Version of the service
    correlation_id = Column(String(255))  # For linking related receipts
    parent_receipt_id = Column(UUID(as_uuid=True))  # For nested operations
    
    # Audit fields
    ip_address = Column(String(45))  # Client IP (for security)
    user_agent = Column(String(500))  # Client user agent
    session_id = Column(String(255))  # Session identifier

    # Cryptographic integrity
    content_hash = Column(String(64))  # SHA-256 hash of receipt contents
    previous_hash = Column(String(64))  # Hash of previous receipt (for chaining)

    # Relationships
    user = relationship("User", back_populates="receipts")
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert receipt to dictionary for API responses."""
        return {
            "id": str(self.id),
            "user_id": str(self.user_id),
            "receipt_type": self.receipt_type.value if self.receipt_type else None,
            "timestamp": self.timestamp.isoformat() if self.timestamp else None,
            "action": self.action,
            "entity_type": self.entity_type,
            "entity_id": str(self.entity_id) if self.entity_id else None,
            "context": self.context,
            "persona_mode": self.persona_mode,
            "worldview_profile": self.worldview_profile,
            "decisions_made": self.decisions_made,
            "confidence_score": self.confidence_score,
            "explanation": self.explanation,
            "privacy_impact": self.privacy_impact,
            "user_visible": self.user_visible,
            "content_hash": self.content_hash,
            "previous_hash": self.previous_hash,
        }
    
    def __repr__(self) -> str:
        return f"<Receipt(id={self.id}, type={self.receipt_type}, user={self.user_id}, action={self.action})>"